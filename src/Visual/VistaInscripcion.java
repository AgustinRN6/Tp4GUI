
package Visual;

import Control.*;
import java.util.Iterator;
import javax.swing.JOptionPane;

public class VistaInscripcion extends javax.swing.JInternalFrame {

    /**
     * Creates new form VistaInscripcion
     */
    public VistaInscripcion() {
        initComponents();
        cargarMaterias();
        cargarAlumnos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlIndice = new javax.swing.JLabel();
        jlelegirM = new javax.swing.JLabel();
        jlelegirA = new javax.swing.JLabel();
        jcbElegirM = new javax.swing.JComboBox<>();
        jcbElegirA = new javax.swing.JComboBox<>();
        jbSalir = new javax.swing.JButton();
        jbInscribir = new javax.swing.JButton();

        jlIndice.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jlIndice.setForeground(new java.awt.Color(0, 204, 204));
        jlIndice.setText("Formulario de Inscripción");

        jlelegirM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jlelegirM.setForeground(new java.awt.Color(0, 204, 204));
        jlelegirM.setText("Elija una materia");

        jlelegirA.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jlelegirA.setForeground(new java.awt.Color(0, 204, 204));
        jlelegirA.setText("Elija un alumno");

        jcbElegirM.setToolTipText("");
        jcbElegirM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbElegirMActionPerformed(evt);
            }
        });

        jcbElegirA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbElegirAActionPerformed(evt);
            }
        });

        jbSalir.setForeground(new java.awt.Color(0, 204, 204));
        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jbInscribir.setForeground(new java.awt.Color(0, 204, 204));
        jbInscribir.setText("Inscribir");
        jbInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInscribirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jlIndice))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jlelegirM)
                                        .addGap(18, 18, 18)
                                        .addComponent(jcbElegirM, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jlelegirA)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jcbElegirA, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbInscribir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSalir)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlIndice)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlelegirM)
                    .addComponent(jcbElegirM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlelegirA)
                    .addComponent(jcbElegirA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSalir)
                    .addComponent(jbInscribir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbElegirMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbElegirMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbElegirMActionPerformed

    private void jcbElegirAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbElegirAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbElegirAActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        System.out.println(evt.getActionCommand());
        setVisible(false);
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInscribirActionPerformed
        
        try {
            //Inscribir al alumno a la materia
            Alumno al = (Alumno) jcbElegirA.getSelectedItem(); //toma el objeto seleccionado en la lista de alumnos
            Materia ma = (Materia) jcbElegirM.getSelectedItem(); //toma el objeto seleccionado en la lista de materias
            
            //Comprueba que NO se haya inscripto el alumno en la misma materia
            boolean alumnoMismaMateria = false;
            Iterator<Materia> aMM = al.getMaterias().iterator();
            while (aMM.hasNext()) {
                if (aMM.next().getIdMateria() == ma.getIdMateria()) {
                    alumnoMismaMateria = true;
                }
            }
            if (alumnoMismaMateria) {
                String mismoDatos = "El alumno ya está inscripto en la materia";
                JOptionPane.showMessageDialog(null, mismoDatos);

            }
            //Comprueba que NO estén vacios los casilleros
            if (jcbElegirA.getSelectedIndex() == -1 || jcbElegirM.getSelectedIndex() == -1) {
                String SinDatos = "No tiene datos para inscribir";
                JOptionPane.showMessageDialog(null, SinDatos);
            } else if(!alumnoMismaMateria) {
                al.agregarMateria(ma); // agrega la materia al alumno
                String Cargar = "Se ha cargado la materia en el alumno exitosamente!";
                JOptionPane.showMessageDialog(null, Cargar);
            }

        }catch(java.lang.ClassCastException SinObjeto) {
            String SinDatos = "No condice con los formatos correspondientes a lo seleccionado";
            JOptionPane.showMessageDialog(null, SinDatos);
        }

    }//GEN-LAST:event_jbInscribirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbInscribir;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Alumno> jcbElegirA;
    private javax.swing.JComboBox<Materia> jcbElegirM;
    private javax.swing.JLabel jlIndice;
    private javax.swing.JLabel jlelegirA;
    private javax.swing.JLabel jlelegirM;
    // End of variables declaration//GEN-END:variables
    //Cargar las materias y alumnos del HashSet
    private void cargarMaterias() {
        Iterator<Materia> listarMaterias = Ventana.materias.iterator();
        while(listarMaterias.hasNext()) {
            Materia cargar = listarMaterias.next();
            jcbElegirM.addItem(cargar);
        }        
    }
    private void cargarAlumnos() {
        Iterator<Alumno> listarAlumnos = Ventana.alumnos.iterator();
        while (listarAlumnos.hasNext()) {
            Alumno cargar = listarAlumnos.next();
            jcbElegirA.addItem(cargar);
        }
    }
}
